import requests, argparse, sys
from modules.utils import colored, pprint


__doc__ = "Random identity info generator."

def parse_args(args: list = sys.argv[1:]):
    parser = argparse.ArgumentParser("r-ident", description=__doc__)
    parser.add_argument("-r", "--results", type=int, default=1, help="Number of identities to generate (Default: 1, Max: 5.000).")
    parser.add_argument("-g", "--gender", type=str, default="", help="You can specify whether you would like to have only male or only female identities generated by adding the gender parameter. Valid values for the gender parameter are \"male\" or \"female\". Any other value will cause the service to return both male and female identities.")
    parser.add_argument("-n", "--nationality", type=str, default="", help="You can request different nationalities for identities (Possible Values: AU, BR, CA, CH, DE, DK, ES, FI, FR, GB, IE, IR, NL, NZ, TR, US).")
    parser.add_argument("-s", "--seed", type=str, default="", help="Seeds allow you to always generate the same set of users. For example, the seed \"foobar\" will always return results for Becky Sims (for version 1.0). Seeds can be any string or sequence of characters.")
    args = parser.parse_args(args)

    try:
        resp = requests.get(f"https://randomuser.me/api/?results={args.results}&gender={args.gender}&nat={args.nationality}&seed={args.seed}&exc=registered,id&noinfo")
        if resp.ok:
            resp = resp.json()
            results = resp.get("results", [])
            print(colored(f"[i] {len(results) or 'No'} identit{'ies' if len(results) != 1 else 'y'} generated ..."))
            for ident in results:
                ident["name"] = " ".join(ident["name"].values()).title()
                del ident["login"]["salt"]
                del ident["login"]["md5"]
                del ident["login"]["sha1"]
                del ident["login"]["sha256"]
                for key, value in ident.copy()["location"].items():
                    ident["location"][key] = str(value).title()
                pprint(ident)
                if len(results) > results.index(ident) + 1:
                    print("")
        else:
            raise Exception(resp.text)
    except (KeyboardInterrupt, Exception) as e:
        print(colored(f"[!] {type(e).__name__}:", "red"))
        if str(e):
            print(colored(f" -  {e}", "red", True))


if __name__ == "__main__":
    parse_args()
